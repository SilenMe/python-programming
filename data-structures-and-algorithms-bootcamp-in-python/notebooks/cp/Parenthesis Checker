Given an expression string exp. Examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[“,”]” are correct in exp.
For example, the program should print 'balanced' for exp = “[()]{}{[()()]()}” and 'not balanced' for exp = “[(])”

Input:
The first line of input contains an integer T denoting the number of test cases.  Each test case consists of a string of expression, in a separate line.

Output:
Print 'balanced' without quotes if the pair of parenthesis is balanced else print 'not balanced' in a separate line.

Constraints:
1 ≤ T ≤ 100
1 ≤ |s| ≤ 105

Example:
Input:
3
{([])}
()
([]

Output:
balanced
balanced
not balanced

** For More Input/Output Examples Use 'Expected Output' option **






solution:


def check(s):
    a=[0]
    for r in s:
        if(r=="(" or r=="[" or r=="{" ):
            a.append(r)
        elif((r==")" and a[-1]=='(') or (r=="]" and a[-1]=='[') or (r=="}"  and a[-1]=='{')):
            if len(a)!=0:
                a.pop()
            
        else:
            a.append(r)
        
        
    if len(a)==1:
        return 'balanced'
    else:
        return 'not balanced'
        
        
    
    
    
t=int(input())
while t>0:
    s=input()
    print(check(s))
    t=t-1